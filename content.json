{"meta":{"title":"blog","subtitle":"Screw1024","description":"","author":"陈永建","url":"https://Screw1024.github.io"},"pages":[{"title":"为何建站 && 为何写作","date":"2019-03-05T03:23:07.000Z","updated":"2019-03-08T02:03:32.060Z","comments":true,"path":"about/index.html","permalink":"https://Screw1024.github.io/about/index.html","excerpt":"","text":"为何建站因为本人是地理信息科学专业的大三学生（2019年），作为交叉学科，我们在本科阶段要学的主要分为计算机编程知识、测绘遥感方面的专业知识、考研统考学科 基础学科知识。 搭建这个网站现阶段主要是为了记录在学习的过程中的技术收获，养成知识的归纳的习惯，另外就是写一些时事的看法 吐槽。😂 而最主要的目的，就是能够通过本站展示自己，如果能以此能找到三俩好友，幸甚至哉。😀 为何记录 人类区别于其他物种最重要的原因是，人类懂得记录，记录会推动人类反思，反思进而推动人类进步，而其他物种的生生不息大多只体现在繁衍上。 带着自己的思考记录，在自己回首再读的时候，或许能够发现当时的思维的局限，能够明白自己是否在进步。过年期间没事时，又看了一遍黎明之前跟大秦帝国，觉得自己能够对人物之间的解读突然上了一个层次，而这是突然发现的，所以想通过平时记录一些时事，一做学习之余的消遣，二为以后反思提供资料。 补充简言之，本站是一个记录技术和思考的原创个人博客。 现阶段主要是计算机方面的一些总结，可以获得成就奖嘛😜。以后打算走GIS开发路线，如果能够顺利，希望以后能够有机会写一些GIS方面的总结，因为本人能力有限，在学校阶段主要精力放在了计算机上了。 文章中如若发现错误或不当言论，还望您不吝赐教。 关于作者在校生，刚把前端基础学的差不多（顺带说下，通过搭建本站终于懂了node的模块化的好处了）。目前正在学Python，想学习一下Django以及爬虫，这些都是以后web gis的技术要求。 技术交流、开车交友请右转找微信小图标🙃","keywords":"陈永建，陈永建的博客，永远的“白带”选手"},{"title":"标签云","date":"2019-03-04T07:37:12.000Z","updated":"2019-03-08T01:06:03.383Z","comments":true,"path":"tags/index.html","permalink":"https://Screw1024.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"天注定，并非命中注定","slug":"天注定","date":"2019-06-02T11:44:09.000Z","updated":"2019-06-02T13:39:29.720Z","comments":true,"path":"reading/A Touch of Zen-1559475849.html","link":"","permalink":"https://Screw1024.github.io/reading/A Touch of Zen-1559475849.html","excerpt":"","text":"天注定，这部电影看完之后，回过来再看这个电影名字，越发饶有韵味。 很自然通过电影名字就反应出两个意思，其一是对电影来说，这是一部注定不能在大陆播出的电影，即使在豆瓣上也在前年被撤掉了,看完电影不能在豆瓣上看看别人的感想，就跟不能听歌时看网易云的评论是一种感觉吧😉 另外一层意思是对四个故事，五个主人公（我把李梦女神饰演的芙蓉也算上），他们的生存环境对他们的极限的做法是有着直接联系的，有一定的注定成分，可我还是相信人的主观能动性的，结尾展开。 首先第一个故事，姜武饰演的胡大海，源自于胡文海的案子，发生在2001年的山西，山西晋中榆次区乌金山镇大峪口村村民胡文海开枪致使14人死亡（9户人家、8男6女被杀），3人重伤，震惊中外。 他在审判庭上说，我多次和村民向有关部门检举反映都石沉大海，官老爷们给尽了我们冷漠与白眼，我只有以暴制暴了。 看到这贾导演也挺不容易的，从始至终大海在剧中的那封信都没有寄出去，怕是寄了出去，这部电影连电影节都去不了了吧😥，如果一个普通的文艺青年，可能就会以一种白描的手法，来拍这部电影，或许给人的震撼会更大吧，但是除了宣泄了自己之后呢？片子不能过审，可能传播的范围不过几千人，在不违背初心下稍加克制，连我这个在校学生都能知道这部电影，我想才是对社会有更大的贡献。 哈，扯远了，说回来。整部电影的几个故事，个人觉得，导演对第一个故事拍的最用心，无论是配乐中出现的京剧还是大海枪上披的大虎图，艺术质感非常的强烈。在枪杀村长时在牌坊前面和在煤老板凯莎拉蒂的车上，这两个镜头给人的镜头冲击感太到位了。 说到镜头，还有一个就是三在回家时，扛着儿子走在路上时的镜头，一边是贫穷的小村落，在河的另一边是高楼大厦，不禁让人想起老话，穷山恶水出刁民，现在想来，我觉得是犯罪成本太低，试想一下，在他见过外面的繁荣景象后再次回到他的小村落，就像他跟媳妇说的，会觉得没意思。在偶然机会能弄到枪，可以通过杀人抢劫就能快速得到“回报”，同时亡命天涯使他觉得人生才是精彩的。我在剧中是最能理解到他的叫人窒息的分裂状态，如果你觉得生活没什么意思了，有什么是不敢做出来的呢，找点自己的兴趣爱好，不让自己每天没事瞎想，一个月做几个小时的文艺青年就够了😬 第三个故事，关于小玉的故事，我可能在学校没有什么特俗的经历，不能看懂她的事件反应了一个怎样的普遍的社会案件，我只是理解为一种激情杀人而已。随便说下，感觉这位女前辈表演肉眼可见地“认真”，有些太僵硬，与她对比是在《风中有朵雨做的云》中的小宋佳，让人刮目相看。 第四个故事，原型是富士康连环跳楼案和东莞色情行业的畸形。 我想导演把这两个放在一起，应该是费了一番心思，嫖客一般多是富士康小哥老板的角色，他们有钱，以至于可以让一个东莞的色情行业的创新能力全国第一，粉红苏维埃，首长关怀，令人怎么讲，瞠目结舌，女性被物化成这样。如果新中国建立没有废除娼妓的合法化的话，不知全国会有多少个东莞冒出来。 女神李梦第一次看到就眼前一亮，因为在文艺片上的颜值派没有多少😜，她穿着蓝色裙子走在放生金鱼的路上，背着手，海风吹拂，头发和裙子随风而动，无限美好。看了下女神好像只有这部电影跟白鹿原两部口碑比较好的作品，希望以后她能成为下一个汤唯吧。 李梦饰演的三陪女跟富士康小哥是一样的，一个因为贫困不想伤害别人而选择自己跳楼逃脱，一个自甘堕落红尘，我非常同情和理解他们，起码他们没有伤害别人（如果他们自认为对得起家人），但是这种价值观我是非常不赞同的 总结：讲了这么多理解他们，同情他们，但是不赞同他们，下面来讲讲我的想法，从一个自认为是个正能量的热心青年的角度出发😁 首先，村民大海，说实话是不是因为他两次想拿下煤矿的开采权而没有成功心怀不满，进而举报贪污没有成功，在看到煤老板越来越富有，心理终于失衡，最后杀人。不然，真实事件中，怎么杀了十几口人。在当时的情况下，官商勾结，官官相护的确非常普遍跟严重，在自己上诉无果的情况下是否应该努力收集证据，待到时机成熟时在进行举报，习大大上台后，严惩贪腐，不正是顺应了人民日益高涨的反贪需求。当然，这样需要等待十几年二十年，换做是我，收集一些证据之后，肯定会离开这块伤心地，边等待强力的监察机构的到来。 其余三个，抢劫犯，富士康员工跟三陪女要么选择逃避，要么妥协，要么通过变态的手段进行反抗。我们当然可以做有益的反抗，在一份正常的岗位踏实努力地做事情，多看看书，拓宽拓宽思路，通过自己的，合法合理的方式反抗生活，就如贾导说的，“作为导演，呈现了他们的命运，但是我不赞成暴力解决问题，这不是社会进步，是禁锢。但是我坚持作为人我们必须保持反抗的精神，也包括反抗商业给我们的制约，意识形态给我们的制约。电影就是我反抗的方法，我感谢电影，这让我不需要拿起枪，拿起摄影机就可以。”他反抗社会的基础是，他能够在电影领域先是学习足够的电影知识，能够有代表作证明自己，才能吸引这么多明星认真地甚至用力地表演。这种电影生来就是不会放映的，意味着演员应该都是低片酬出演，事实上，国内大部分文艺电影，都是一群电影人反抗社会的产物，包括但不单单限于导演，演员，摄影师，制片人等。","categories":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}],"tags":[{"name":"-movie","slug":"movie","permalink":"https://Screw1024.github.io/tags/movie/"}],"keywords":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}]},{"title":"cesium自定义影像数据","slug":"加载自定义影像数据","date":"2019-05-16T02:40:24.000Z","updated":"2019-05-16T06:20:27.462Z","comments":true,"path":"backend/cesium add map data-1557974445.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add map data-1557974445.html","excerpt":"","text":"一、创建服务器 1、上面的方法用的是Express框架自己写的服务器，现在发现安装http-server可以直接通过简单指令创建服务器，我们可以先全局安装 1npm install http-server -g 2、然后通过以下指令创建监听4400端口的服务器，http-server可以简写成hs 1http-server -p 端口号（4400） 二、加载数据 1、因为有些数据不能直接访问，会被墙，报跨域请求错误，我们添加谷歌中国地图 123//加载谷歌中国卫星影像，谷歌地球商业版，需要翻墙，报跨域资源请求错误 var url = &quot;http://mt1.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;s=Gali&quot;; var Google = new Cesium.UrlTemplateImageryProvider(&#123;url:url&#125;) 2、将数据图层变换控件关闭，并加载自己的数据 12345var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;,&#123;// 将图层选择的控件关掉，才能添加其他影像数据baselLayerPicker:false,imageryProvider:Google&#125;); 3、 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;script src=&quot;Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;Build/Cesium/Widgets/widgets.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; body&#123; margin:0px; &#125; #cesiumContainer &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt; &lt;script&gt; //加载谷歌中国卫星影像，谷歌地球商业版，需要翻墙，报跨域资源请求错误 var url = &quot;http://mt1.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;s=Gali&quot;; var Google = new Cesium.UrlTemplateImageryProvider(&#123;url:url&#125;) //Viewer第一个参数容器就是需要上面的div容器承载 var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;,&#123; // 将图层选择的控件关掉，才能添加其他影像数据 baselLayerPicker:false, imageryProvider:Google &#125;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium加载地形","slug":"加载地形","date":"2019-05-16T02:40:24.000Z","updated":"2019-05-16T06:20:09.766Z","comments":true,"path":"backend/cesium add Terrain-1557974424.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add Terrain-1557974424.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、加载地形图数据 在Cesium中，地球影像数据跟地形数据是分开的，为了加载更快，Cesium默认加载的地形数据是非常模糊的，需要修改 1234567//加载在线地形图数据var worldTerrain = Cesium.createWorldTerrain(&#123;// required for water effectsrequestWaterMask : true, // required for terrain lightingrequestVertexNormals : true &#125;); 这里有个坑是，版本的问题可能会导致createWorldTerrain()所封装的网址不一致，导致前面版本无法正常访问，我就是先用1.51版本写的代码，怎么都不报错，且不加载数据，更改1.57后正常 同时，如果地形数据无法正确访问，影像数据也加载不出来 三、挂载图层到div上 1234567//Viewer第一个参数容器就是需要上面的div容器承载var viewer = new Cesium.Viewer('cesiumContainer',&#123;// 将图层选择的控件关掉，才能添加其他影像数据baselLayerPicker:false,imageryProvider:Google,terrainProvider: worldTerrain&#125;); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;script src=\"Build/Cesium/Cesium.js\"&gt;&lt;/script&gt; &lt;link href=\"Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\"&gt; &lt;style&gt; body&#123; border: 0px; margin: 0px; &#125; #cesiumContainer &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"cesiumContainer\"&gt;&lt;/div&gt; &lt;script&gt; //加载谷歌中国卫星影像，谷歌地球商业版，需要翻墙，报跨域资源请求错误 var url = \"http://mt1.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;s=Gali\"; var Google = new Cesium.UrlTemplateImageryProvider(&#123;url:url&#125;) //Viewer第一个参数容器就是需要上面的div容器承载 var viewer = new Cesium.Viewer('cesiumContainer',&#123; // 将图层选择的控件关掉，才能添加其他影像数据 baselLayerPicker:false, imageryProvider:Google &#125;); viewer.camera.setView(&#123; // Cesium的坐标是以地心为原点，一向指向南美洲，一向指向亚洲，一向指向北极州 // fromDegrees()方法，将经纬度和高程转换为世界坐标 destination:Cesium.Cartesian3.fromDegrees(117.48,30.67,15000.0), orientation:&#123; // 指向 heading:Cesium.Math.toRadians(90,0), // 视角 pitch:Cesium.Math.toRadians(-90), roll:0.0 &#125; &#125;); // 同理，想要标记某个位置和角度，下次直接进入，可以在选好的角度上按F12进入开发者工具 // 输入viewer.camera.heading viewer.camera.pitch viewer.camera.position回车可以得到信息 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium设置位置和视角","slug":"设置位置和视角","date":"2019-05-16T02:40:24.000Z","updated":"2019-05-16T06:21:22.620Z","comments":true,"path":"backend/cesium add position and view-1557974617.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add position and view-1557974617.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、设置视角 在Cesium中是可以打开默认定标和视角的，跟谷歌地球一样，同时注意Cesium使用的坐标系是从地心坐标系，可以通过fromDegrees（）将经纬度和高程转化Cesium坐标系。 123456789101112viewer.camera.setView(&#123; // Cesium的坐标是以地心为原点，一向指向南美洲，一向指向亚洲，一向指向北极州 // fromDegrees()方法，将经纬度和高程转换为世界坐标 destination:Cesium.Cartesian3.fromDegrees(117.48,30.67,15000.0), orientation:&#123; // 指向 heading:Cesium.Math.toRadians(90,0), // 视角 pitch:Cesium.Math.toRadians(-90), roll:0.0 &#125;&#125;); 同理，想要标记某个位置和角度，下次直接进入，可以在选好的角度上按F12进入开发者工具 输入viewer.camera.heading viewer.camera.pitch viewer.camera.position回车可以得到Cesium坐标系下的信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;script src=&quot;Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;Build/Cesium/Widgets/widgets.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; body&#123; border: 0px; margin: 0px; &#125; #cesiumContainer &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt; &lt;script&gt; //加载谷歌中国卫星影像，谷歌地球商业版，需要翻墙，报跨域资源请求错误 var url = &quot;http://mt1.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;s=Gali&quot;; var Google = new Cesium.UrlTemplateImageryProvider(&#123;url:url&#125;) //Viewer第一个参数容器就是需要上面的div容器承载 var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;,&#123; // 将图层选择的控件关掉，才能添加其他影像数据 baselLayerPicker:false, imageryProvider:Google &#125;); viewer.camera.setView(&#123; // Cesium的坐标是以地心为原点，一向指向南美洲，一向指向亚洲，一向指向北极州 // fromDegrees()方法，将经纬度和高程转换为世界坐标 destination:Cesium.Cartesian3.fromDegrees(117.48,30.67,15000.0), orientation:&#123; // 指向 heading:Cesium.Math.toRadians(90,0), // 视角 pitch:Cesium.Math.toRadians(-90), roll:0.0 &#125; &#125;); // 同理，想要标记某个位置和角度，下次直接进入，可以在选好的角度上按F12进入开发者工具 // 输入viewer.camera.heading viewer.camera.pitch viewer.camera.position回车可以得到信息 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium创建一个纯净的地球","slug":"创建一个纯净的地球，并了解基本界面组件","date":"2019-05-16T02:35:37.000Z","updated":"2019-06-02T13:49:49.306Z","comments":true,"path":"backend/cesium add clean globe-1557974137.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add clean globe-1557974137.html","excerpt":"","text":"一、建立依赖 基于Cesium创建的网页，都依赖于源码中Build中两个基本的库，JS库和CSS库，所以需要在开头就要引入本地的两个文件。 12&lt;script src=\"Build/Cesium/Cesium.js\"&gt;&lt;/script&gt;&lt;link href=\"Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\"&gt; 当然也可以从网络上直接引用，但是其外网加上文件太大，导致加载极慢，不建议 二、创建服务器 Cesium创建的网页不能通过本地访问方式直接访问，需要在所在的文件夹下建立服务器，形式是没有限制的，可以是PHP .NET等，我推荐使用Node，因为Cesium演示文件HelloWorld.html想要正确运行，就需要通过node运行，所以无需再安装其他服务器软件 1、安装Express.js，这个框架将Node的服务器封装的很好，通过yarn安装 1yarn add express 2、创建服务器 server.js，监听4399端口 12345678910var http = require(\"http\");var express = require(\"express\");const path = require('path');var app = express();app.use(express.static(path.join(__dirname, '')));app.listen(4111, () =&gt; &#123; console.log(`App listening at port 4111`)&#125;) 3、启动服务器 1node server.js 三、创建网页文件 1、因为默认的在线地图不显示，我给改为以下地址才可以 12//ion账户提供一个token去访问Bing影像底图Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlMTk4ZTYyNy00MjkxLTRmZWYtOTg1MS0wOThjM2YzMzIzYzEiLCJpZCI6NzEyMSwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTU0ODMxNzI5OX0.rKV8Ldl_bgR3lVvNsbHhTX62j8JH8ADCIWAwk7tXpr8'; 2、通过css方式，将所有控件隐藏，只保留最原始地球，通过控件参数控制，还会留下商标，另基本界面控件在注释中介绍 3、导航栏中输入 1http://localhost:4399/1-更换ion显示纯净地球.html 4、 5、全部html代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;!-- 引入本地的cesium支持js和css文件，更快并节约流量 --&gt; &lt;script src=\"Build/Cesium/Cesium.js\"&gt;&lt;/script&gt; &lt;link href=\"Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\"&gt; &lt;style&gt; body&#123; /* 控制显示范围 */ margin:0px; &#125; #cesiumContainer &#123; width: 100%; height: 100%; &#125; .cesium-viewer-toolbar, /* 右上角按钮组 */ .cesium-viewer-animationContainer, /* 左下角动画控件 */ .cesium-viewer-timelineContainer, /* 时间线 */ .cesium-viewer-bottom /* logo信息 */ &#123; display: none; &#125; .cesium-viewer-fullscreenContainer /* 全屏按钮 */ &#123; position: absolute; top: -999em; &#125; /* 注：全屏按钮不能通过display:none的方式来达到隐藏的目的，这是因为生成的按钮控件的行内样式设置了display属性，会覆盖引入的css属性 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"cesiumContainer\"&gt;&lt;/div&gt; &lt;script&gt; //bing地图默认调用地址不对，找到一个代替地址 Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlMTk4ZTYyNy00MjkxLTRmZWYtOTg1MS0wOThjM2YzMzIzYzEiLCJpZCI6NzEyMSwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTU0ODMxNzI5OX0.rKV8Ldl_bgR3lVvNsbHhTX62j8JH8ADCIWAwk7tXpr8'; //时间轴，时间等地球底部控件，不添加参数，为默认选项 // var viewer = new Cesium.Viewer('cesiumContainer'); //options对象做为配置参数 var viewer = new Cesium.Viewer(\"cesiumContainer\", &#123; //放大镜图标，查找位置工具，查找到之后会将镜头对准找到的地址，默认使用bing地图 geocoder: true, //房子图标，视角返回初始位置 homeButton: true, //经纬网图标，选择视角的模式，有三种：3D，2D，哥伦布视图（2.5D) sceneModePicker: true, //地图图标，图层选择器，选择要显示的地图服务和地形服务 baseLayerPicker: true, //问号图标，导航帮助按钮，显示默认的地图控制帮助 navigationHelpButton: true, //动画器件，显示当前时间，允许跳转特定时间 animation: true, //时间轴 timeline: true, //全屏图标，全屏按钮 fullscreenButton: true, //虚拟现实 vrButton: true, //阴影 shadows: true, //点击后显示详细信息 infoBox: true, //展示数据版权属性 CreditsDisplay: true &#125;); viewer.scene.debugShowFramesPerSecond = true; //显示帧率 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium添加区域块","slug":"加载区域块","date":"2019-05-16T02:35:37.000Z","updated":"2019-05-16T06:19:38.666Z","comments":true,"path":"backend/cesium add block-1557974337.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add block-1557974337.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、加载影像和地形数据（看视角篇） 三、添加区域块 区域块的数据格式是geojson格式 区域块中的信息点击的默认样式会直接显示这个地方的经纬度，我们通过下一篇中的kml数据可以将信息自定义，也更加地完善。 同时，这个添加的方式是异步的，我们还应该设置其中心点的海拔，以及文字内容，通过遍历实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//加载代码区块var geojsonOptions = &#123;//贴地选项clampToGround:true&#125;;// Load neighborhood boundaries from a GeoJson file// Data from : https://data.cityofnewyork.us/City-Government/Neighborhood-Tabulation-Areas/cpf4-rkhqvar neighborhoodsPromise = Cesium.GeoJsonDataSource.load('/Assets/SampleData/sampleNeighborhoods.geojson', geojsonOptions);// Save an new entity(实体) collection(收藏品) of neighborhood datavar neighborhoods;// 在回调函数中进行操作neighborhoodsPromise.then(function(dataSource) &#123;// Add the new data as entities to the viewerviewer.dataSources.add(dataSource);neighborhoods = dataSource.entities;// Get the array of entities(提取出每个区块)var neighborhoodEntities = dataSource.entities.values;for (var i = 0; i &lt; neighborhoodEntities.length; i++) &#123;var entity = neighborhoodEntities[i];if (Cesium.defined(entity.polygon)) &#123;// Use kml neighborhood value as entity nameentity.name = entity.properties.neighborhood;// Set the polygon material to a random, translucent color(修改多边形材质)entity.polygon.material = Cesium.Color.fromRandom(&#123;red : 0.1,maximumGreen : 0.5,minimumBlue : 0.5,alpha : 0.6&#125;);// Tells the polygon to color the terrain. ClassificationType.CESIUM_3D_TILE will color the 3D tileset, and ClassificationType.BOTH will color both the 3d tiles and terrain (BOTH is the default)entity.polygon.classificationType = Cesium.ClassificationType.TERRAIN;// Generate Polygon center(将中心点移到海拔为0的位置)var polyPositions = entity.polygon.hierarchy.getValue(Cesium.JulianDate.now()).positions;var polyCenter = Cesium.BoundingSphere.fromPoints(polyPositions).center;polyCenter = Cesium.Ellipsoid.WGS84.scaleToGeodeticSurface(polyCenter);entity.position = polyCenter;// Generate labels(文字标签)entity.label = &#123;text : entity.name,showBackground : true,scale : 0.6,horizontalOrigin : Cesium.HorizontalOrigin.CENTER,verticalOrigin : Cesium.VerticalOrigin.BOTTOM,distanceDisplayCondition : new Cesium.DistanceDisplayCondition(10.0, 8000.0),disableDepthTestDistance : 100.0&#125;;&#125;&#125;&#125;);","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium添加KML数据，显示标签的信息","slug":"加载KML数据，显示标签信息","date":"2019-05-16T02:34:54.000Z","updated":"2019-05-16T06:19:22.238Z","comments":true,"path":"backend/cesium add KML and tags-1557974094.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add KML and tags-1557974094.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、加载影像和地形数据（看视角篇） 三、添加区域块 （区域块篇） 四、加载KML 数据格式是kml格式 自定义KML数据和其显示的样式，我们要求 在description属性中添加想要表示的信息 1234567891011121314151617181920212223242526272829303132333435363738394041 // 加载kml数据，更改description信息，多了黄色的标签里面包含的 var kmlOptions = &#123; camera : viewer.scene.camera, canvas : viewer.scene.canvas, clampToGround : true &#125;; // Load geocache points of interest from a KML file // Data from : http://catalog.opendata.city/dataset/pediacities-nyc-neighborhoods/resource/91778048-3c58-449c-a3f9-365ed203e914 var geocachePromise = Cesium.KmlDataSource.load('/Assets/SampleData/sampleGeocacheLocations.kml', kmlOptions);// Add geocache billboard entities to scene and style themgeocachePromise.then(function(dataSource) &#123;// Add the new data as entities to the viewerviewer.dataSources.add(dataSource);// Get the array of entitiesvar geocacheEntities = dataSource.entities.values;for (var i = 0; i &lt; geocacheEntities.length; i++) &#123;var entity = geocacheEntities[i];if (Cesium.defined(entity.billboard)) &#123;// Adjust the vertical origin so pins sit on terrainentity.billboard.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;// Disable the labels to reduce clutterentity.label = undefined;// Add distance display conditionentity.billboard.distanceDisplayCondition = new Cesium.DistanceDisplayCondition(10.0, 20000.0);// Compute latitude and longitude in degreesvar cartographicPosition = Cesium.Cartographic.fromCartesian(entity.position.getValue(Cesium.JulianDate.now()));var latitude = Cesium.Math.toDegrees(cartographicPosition.latitude);var longitude = Cesium.Math.toDegrees(cartographicPosition.longitude);// Modify description(将信息添加到description描述信息中，我们这里只添加经纬度)var description = '&lt;table class=\"cesium-infoBox-defaultTable cesium-infoBox-defaultTable-lighter\"&gt;&lt;tbody&gt;' +'&lt;tr&gt;&lt;th&gt;' + \"Longitude\" + '&lt;/th&gt;&lt;td&gt;' + longitude.toFixed(5) + '&lt;/td&gt;&lt;/tr&gt;' +'&lt;tr&gt;&lt;th&gt;' + \"Latitude\" + '&lt;/th&gt;&lt;td&gt;' + latitude.toFixed(5) + '&lt;/td&gt;&lt;/tr&gt;' +'&lt;/tbody&gt;&lt;/table&gt;';entity.description = description;&#125;&#125;&#125;);","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium添加3dTiles","slug":"3dTiles","date":"2019-05-16T02:31:36.000Z","updated":"2019-06-02T13:49:28.281Z","comments":true,"path":"backend/cesium add 3dTiles-1557973896.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add 3dTiles-1557973896.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、加载建筑物 在Cesium中建筑物信息的加载需要自己添加数据到Cesium ion中然后使用的，为了测试Cesime封装了几个数据，我们已纽约的一个岛为例。 1、将视角定位在纽约上空 12345678// 坐标设置在纽约，这样会有默认的3dTiles数据var initialPosition = Cesium.Cartesian3.fromDegrees(-74.01881302800248, 40.69114333714821, 753);var initialOrientation = new Cesium.HeadingPitchRoll.fromDegrees(21.27879878293835, -21.34390550872461, 0.0716951918898415);viewer.scene.camera.setView(&#123; destination: initialPosition, orientation: initialOrientation, endTransform: Cesium.Matrix4.IDENTITY&#125;); 2、加载建筑物 12/ 加载3DTiles数据，纽约进行封装了var city = viewer.scene.primitives.add(new Cesium.Cesium3DTileset(&#123;url:Cesium.IonResource.fromAssetId(5741)&#125;)) 3、更改建筑物样式 123456789101112131415161718// 设置建筑物的样式var heightStyle = new Cesium.Cesium3DTileStyle(&#123;color:&#123; conditions:[ [&quot;$&#123;height&#125; &gt;= 300&quot;,&quot;rgba(45,0,75,0.5)&quot;], [&quot;$&#123;height&#125; &gt;= 200&quot;,&quot;rgb(102,71,151)&quot;], [&quot;$&#123;height&#125; &gt;= 100&quot;,&quot;rgb(170,162,204)&quot;], [&quot;$&#123;height&#125; &gt;= 50&quot;,&quot;rgb(224,226,238)&quot;], [&quot;$&#123;height&#125; &gt;= 25&quot;,&quot;rgb(252,230,200)&quot;], [&quot;$&#123;height&#125; &gt;= 10&quot;,&quot;rgb(248,176,87)&quot;], [&quot;$&#123;height&#125; &gt;= 5&quot;,&quot;rgb(198,106,11)&quot;], [&quot;true&quot;,&quot;rgb(102,71,151)&quot;] ] &#125;&#125;);// 将默认样式改为自定义样式city.style = heightStyle; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;script src=&quot;Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;Build/Cesium/Widgets/widgets.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; body&#123; border: 0px; margin: 0px; &#125; #cesiumContainer &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt; &lt;script&gt; //加载谷歌中国卫星影像，谷歌地球商业版，需要翻墙，报跨域资源请求错误 var url = &quot;http://mt1.google.cn/vt/lyrs=s&amp;hl=zh-CN&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;s=Gali&quot;; var Google = new Cesium.UrlTemplateImageryProvider(&#123;url:url&#125;) //Viewer第一个参数容器就是需要上面的div容器承载 var viewer = new Cesium.Viewer(&apos;cesiumContainer&apos;,&#123; // 将图层选择的控件关掉，才能添加其他影像数据 baselLayerPicker:false, imageryProvider:Google &#125;); // 坐标设置在纽约，这样会有默认的3dTiles数据 var initialPosition = Cesium.Cartesian3.fromDegrees(-74.01881302800248, 40.69114333714821, 753); var initialOrientation = new Cesium.HeadingPitchRoll.fromDegrees(21.27879878293835, -21.34390550872461, 0.0716951918898415); viewer.scene.camera.setView(&#123; destination: initialPosition, orientation: initialOrientation, endTransform: Cesium.Matrix4.IDENTITY &#125;); // 加载3DTiles数据，纽约进行封装了 var city = viewer.scene.primitives.add(new Cesium.Cesium3DTileset(&#123;url:Cesium.IonResource.fromAssetId(5741)&#125;)) // 设置建筑物的样式 var heightStyle = new Cesium.Cesium3DTileStyle(&#123; color:&#123; conditions:[ [&quot;$&#123;height&#125; &gt;= 300&quot;,&quot;rgba(45,0,75,0.5)&quot;], [&quot;$&#123;height&#125; &gt;= 200&quot;,&quot;rgb(102,71,151)&quot;], [&quot;$&#123;height&#125; &gt;= 100&quot;,&quot;rgb(170,162,204)&quot;], [&quot;$&#123;height&#125; &gt;= 50&quot;,&quot;rgb(224,226,238)&quot;], [&quot;$&#123;height&#125; &gt;= 25&quot;,&quot;rgb(252,230,200)&quot;], [&quot;$&#123;height&#125; &gt;= 10&quot;,&quot;rgb(248,176,87)&quot;], [&quot;$&#123;height&#125; &gt;= 5&quot;,&quot;rgb(198,106,11)&quot;], [&quot;true&quot;,&quot;rgb(102,71,151)&quot;] ] &#125; &#125;); // 将默认样式改为自定义样式 city.style = heightStyle; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"cesium添加无人机路径","slug":"添加无人机路径","date":"2019-05-16T02:23:47.000Z","updated":"2019-05-16T06:21:00.467Z","comments":true,"path":"backend/cesium add drone-1557973428.html","link":"","permalink":"https://Screw1024.github.io/backend/cesium add drone-1557973428.html","excerpt":"","text":"一、创建服务器（看第一篇笔记） 二、加载影像和地形数据（看视角篇） 三、添加区域块 （区域块篇） 四、加载KML 五、添加路径和无人机 路径的格式是czml格式，本质上也是json格式，通过格式化可以看到其中有两个对象，第一个对象中指定时间，第二个对象指定位置 无人机的格式为gltf 12345678910111213141516171819202122232425262728293031// 添加无人机路径和无人机// Load a drone flight path from a CZML filevar dronePromise = Cesium.CzmlDataSource.load('/Assets/SampleData/SampleFlight.czml');// Save a new drone model entityvar drone;dronePromise.then(function(dataSource) &#123;viewer.dataSources.add(dataSource);// Get the entity using the id defined in the CZML datadrone = dataSource.entities.getById('Aircraft/Aircraft1');// Attach a 3D modeldrone.model = &#123;uri : '/Assets/SampleData/Models/CesiumDrone.gltf',minimumPixelSize : 128,maximumScale : 1000,silhouetteColor : Cesium.Color.WHITE,silhouetteSize : 2&#125;;// Add computed orientation based on sampled positions(添加无人机位置)drone.orientation = new Cesium.VelocityOrientationProperty(drone.position);// Smooth path interpolationdrone.position.setInterpolationOptions(&#123;interpolationAlgorithm : Cesium.HermitePolynomialApproximation,interpolationDegree : 2&#125;);drone.viewFrom = new Cesium.Cartesian3(0, -30, 30);// 添加进图层viewer.trackedEntity = drone;&#125;);","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://Screw1024.github.io/tags/cesium/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"万历十五年","slug":"万历十五年","date":"2019-04-24T01:18:25.000Z","updated":"2019-04-24T13:11:03.259Z","comments":true,"path":"reading/《1587，A Year of No Significance》-1556068948.html","link":"","permalink":"https://Screw1024.github.io/reading/《1587，A Year of No Significance》-1556068948.html","excerpt":"","text":"​ 黄仁宇先生的《万历十五年》之所以吸引我读，首先当然是好评如潮，想必会有一番收获。其二，黄仁宇先生提出的大历史观，我非常赞同，将已经发生的历史事件，从宏观的角度去判断趋势，而研究具体细节问题，仍从微观出发。最后，把万历十五年，这个一个被大多数历史学家选择性忽略的年份，当作全文的时间主线，别开生面😊。 每个历史事件背后，往往有29的征兆，每个征兆背后有29个苗头，每个苗条背后有29个线索。 万历皇帝：个人意志与文官制度博弈下的牺牲品​ 刚刚登基，尚且年幼的万历皇帝，在慈圣太后和张居正的严格要求之下，学习儒家经典，书法，历史。从一开始，作为皇帝的万历，就必须学习儒家的正统思想，接受儒家的道德礼制评判标准，表面是为了以后能够跟当朝官员能够进行有效的沟通，而根本控制了皇上的思想，这也就是人类第二伟大的目标——把自己的思想变成别人的（第一伟大的目标——把别人的钱合理的变为自己的钱，美帝华尔街这方面做的最好😁） ​ 十岁的万历皇帝，在书法方面已经取得了较好的进展，并还送了四个字“责难陈善”给当时的老师申时行，一方面能体现一位年轻的皇帝积极进取态度，想要大展宏图的志向，这为一代明君最关键的因素了，令申时行感动了好一阵，也让我们的张居正首辅，看到了希望实现万历之治的希望。正因如此，在小皇帝流露出对书法的兴趣时，我们的首辅大人，却把这当作玩物丧志的表现，不再让他继续学习书法，万历皇帝一生的屈服之路开始了 。 ​ 接下来的万历外公，在军服采购中以劣充好中饱私囊，万历十五年的一天，某将军拿着烂军服找到慈圣太后和万历皇帝，慈圣太后表示绝不会包庇父亲，万历小皇帝也表示追查到底，肃清贪官，整顿吏治，一大批贪官倒台，这却成了张居正进行人事的布局的契机。 ​ 万历十七岁时，某天晚上，因自己的抱负得不到实行，进而夜宴醉酒，调戏宫女，第二天太后和张首辅就对皇帝的行为进行批评教育，可见对皇帝的监管是多么立体，全方位，至此，皇帝的内心基本完全妥协了。 ​ 万历皇帝最后一次挣扎是，想要册封自己最疼爱的郑氏的皇子为太子，从一开始的表明心思，找到文官全体的反对，到一直拖延立太子的时间，到最后迎合文官们的想法，万历皇帝心死，无为而治开始了。 ​ 万历的一生，从想要学习书法、练武、出巡、立储，各个方面只要与传统的礼制有稍许违背，最终妥协的永远是砸门的万历皇帝，也算是一个好男人了，哈😂。这个观点，我一开始，难以接受，因为在我的印象中，中央集权的制度，君权天授的思想让我认为，皇帝只要不违背人伦底线，也算是能为所欲为了，不然为什么会出现那么多暴君，毕竟万历的祖师爷朱元璋可是有名的残忍。他创建的明朝，其制度不可能这么牵制皇帝，不知是在前几代皇帝修改了制度，为了搂底，还是外国汉学家固有的想法。 两任首辅：强势的张居正，中庸的申时行​ 万历家的首辅，就是一个高危职业，跟韩国的总统有得一拼，虽任期中风光无限，但结局总是凄惨，总是会成为制度的牺牲品。不知为何后人还要前赴后继？是迫不得已，大势所趋，还是觉得自己是那位能改写历史，天选之人。 ​ 张居中作为首辅的第一个十年，巩固了年幼新皇的政权，改善了当时的政治环境，不得不说这跟张居正务实的精神分不开，在当时文风溜须，政事流于形式，张居正总是一语切中要害，算是大明王朝一股清流。作为首辅的张居正曲线救国的套路玩的挺好的，作为内阁的官员，张居正只有票拟权，并无实权，张想到先以个人名义，把自己的处置办法写给相应的官员，并许以好处，自己再票拟后给大伴冯保进行披红，两人默契配合，提升效率的同时，也带来了任人唯亲，导致文官权力失去平衡，贪污腐败也就随之而生。张居中，显然看到了这项弊病，下令严管，可自己却不能以身作则，在京城置办豪宅、纵容亲属敛财济私。 ​ 大部分人的理解都是，张居正这样收受贿赂是妥协，他需要钱财为自己的政策开路，因为张居正死后被抄家，家里并没有多少财产，抄家的官员不相信，还逼死了张居正的大儿子。 ​ 权力的过分集中，必然致使很多人的利益受到损害，反张一派在张在世之时，有着太后和冯保的支持，显然不敢露头。其去世后，高拱的《病榻遗言》，作为导火索，点燃了反张一派的希望，《遗言》中将张居中描绘成嫁接维护皇权，实则清除异己，实现自己权力的欲望的人。 ​ 个人认为对于张居正的评价应是褒大于贬，其为了万历皇帝能够上朝，将早朝缩减一半，每两天进行一次，并大幅度进行形式行的精简，其维护皇权不遗余力，但同时，其“芝兰当路，不得不锄”的思想，毫不爱惜自己的羽翼，每一个做实事，并且取得一定成就的人，不管其方式如何，其贡献都应被肯定。 ​ 与之相反的是他的继任者申时行，心有万千沟壑，行无实际举动😥。要我说，也算是高分低能的代表了，想要凭借自己的中庸之道，平衡万历皇帝和文武百官，从而政通人和，想法是好的，但是在明朝末年这种想法无异于痴人说梦尔，最后出卖同事，落了一个忘恩负义的骂名。 每个人都是理想主义者，但是伟大的人总能够将自己的理想立足于现实，尝试着去改变环境 ​ 当然，在其中我们还要注意方式，比如张居正的强势做派，导致其在位期间颁布的政令，在其身亡之后，立马消散在世间。如果能注意方式，留下的不仅仅是他命令戚继光修建的那些炮台了，还能留下一些有利于人民，有利于国家的政策，这方才是伟人，个人觉得商鞅做到了😊，他为他的秦朝带来了“法”，为我们带来了“法”。 戚继光：文官治理下的军事将领最后的倔强​ 明王朝至建国就以文官治理天下，无外乎防止军事叛乱，将军队依附于文官统治之下，实在荒唐。军事上讲究时效，如果将领当机立断，指挥部队迅速投入战斗，那是贪功轻进，好勇嗜杀；要是他们暂时按兵不动，等待有利的战机，那又是畏总不前，玩敌养寇。战场上战机瞬息万变，而主战将军没有自主权，把进防命令需要请命，军队怎么会有战斗力，现在也终于能理解那句“将在外，军令有所不受”，但这样的将领，一般都不会有太好的结局。 ​ 另外，戚继光之所以能被我们牢记，与胡宗宪和张居正的支持是分不开的，一个好的将领不是直接听从如皇帝的号令，独立于行政体制之外的，他们的粮饷和装备，不是由直接拨款，而是从文官所辖部门流通，其成效可想而知。戚提到对于火器的使用，因为各地做的火器质量不一，不易操控，劣质的还会直接炸膛，所以火器的使用才没有成型，如果火器的供给由各地抽取工匠，集中一起制作，不断完善制作流程和标准，形成类似当时的景德镇，我想努尔哈赤的建州铁骑会多吃些苦头吧🙃。军事不应该成为行政的附庸，军队与吏治应该是两个独立的体系，互相制衡，并都效忠于皇帝，方才良策，以文治国，以武治国都不可取。 万历十五年谁做错了？​ 万历十五年，明朝走向衰亡，皇帝万历、首辅张居正、将领戚继光，都想要实现一个万历之治，奈何事与愿违。 在当时的历史条件下，皇帝的励精图治或者宴安耽乐，首辅的独裁或者调和，高级将军的富于创造或者习于苟安，文官的廉洁奉公或者贪污舞弊，思想家的极端进步或者绝对保守，都无法扭转时局. 黄仁宇 ​ 大明王朝整个的社会制度，严重阻碍了生产力的发展，整个之上而下的制度，并非某些人可以改变的，即使是开明的国君，有能力的首辅，实干的将领联合一起都无力对抗这个没落的制度。他们的个人表现，只会推迟会加快制度的重新设计，也就是改朝换代，这就是大历史观。","categories":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}],"tags":[{"name":"book","slug":"book","permalink":"https://Screw1024.github.io/tags/book/"}],"keywords":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}]},{"title":"http1,http2和https的前世今生","slug":"http和https","date":"2019-03-22T13:56:45.000Z","updated":"2019-03-23T00:43:00.797Z","comments":true,"path":"backend/understand http and https-1553263026.html","link":"","permalink":"https://Screw1024.github.io/backend/understand http and https-1553263026.html","excerpt":"","text":"一、前言： 先来观察这两张图，第一张访问域名http://www.12306.cn, 谷歌浏览器提示不安全链接，第二张是https://kyfw.12306.cn/otn/regist/init, 浏览器显示安全，为什么会这样子呢？2017年1月发布的Chrome 56浏览器开始把收集密码或信用卡数据的HTTP页面标记为“不安全”，若用户使用2017年10月推出的Chrome 62，带有输入数据的HTTP页面和所有以无痕模式浏览的HTTP页面都会被标记为“不安全”，此外，苹果公司强制所有iOS App在2017年1月1日前使用HTTPS加密。 二、HTTP和HTTPS发展历史什么是HTTP? 超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。 发展历史： 版本 产生时间 内容 发展现状 HTTP/0.9 1991年 不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求 没有作为正式的标准 HTTP/1.0 1996年 传输内容格式不限制，增加PUT、PATCH、HEAD、 OPTIONS、DELETE命令 正式作为标准 HTTP/1.1 1997年 持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码 2015年前使用最广泛 HTTP/2 2015年 多路复用、服务器推送、头信息压缩、二进制协议等 逐渐覆盖市场 这个Akamai公司建立的一个官方的演示，使用HTTP/1.1和HTTP/2同时请求379张图片，观察请求的时间，明显看出HTTP/2性能占优势。 多路复用：通过单一的HTTP/2连接请求发起多重的请求-响应消息，多个请求stream共享一个TCP连接，实现多留并行而不是依赖建立多个TCP连接。 什么是HTTPS？ 《图解HTTP》这本书中曾提过HTTPS是身披SSL外壳的HTTP。HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。PS:TLS是传输层加密协议，前身是SSL协议，由网景公司1995年发布，有时候两者不区分。 参考连接：1.https://kamranahmed.info/blog/2016/08/13/http-in-depth/2.https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol3.https://tools.ietf.org/html/rfc19454.https://http2.github.io/http2-spec/5.https://www.zhihu.com/question/34074946 三、HTTP VS HTTPSHTTP特点： 无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作 无连接：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。 基于请求和响应：基本的特性，由客户端发起请求，服务端响应 简单快速、灵活 通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性 下面通过一个简单的抓包实验观察使用HTTP请求传输的数据： 结果分析：HTTP协议传输数据以明文形式显示针对无状态的一些解决策略：场景：逛电商商场用户需要使用的时间比较长，需要对用户一段时间的HTTP通信状态进行保存，比如执行一次登陆操作，在30分钟内所有的请求都不需要再次登陆。 通过Cookie/Session技术 HTTP/1.1持久连接（HTTP keep-alive）方法，只要任意一端没有明确提出断开连接，则保持TCP连接状态，在请求首部字段中的Connection: keep-alive即为表明使用了持久连接 HTTPS特点：​ 基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及数据完整性保护 通过抓包可以看到数据不是明文传输，而且HTTPS有如下特点： 内容加密：采用混合加密技术，中间者无法直接查看明文内容 验证身份：通过证书认证客户端访问的是自己的服务器 保护数据完整性：防止传输的内容被中间人冒充或者篡改 混合加密：结合非对称加密和对称加密技术。客户端使用对称加密生成密钥对传输数据进行加密，然后使用非对称加密的公钥再对秘钥进行加密，所以网络上传输的数据是被秘钥加密的密文和用公钥加密后的秘密秘钥，因此即使被黑客截取，由于没有私钥，无法获取到加密明文的秘钥，便无法获取到明文数据。 数字摘要：通过单向hash函数对原文进行哈希，将需加密的明文“摘要”成一串固定长度(如128bit)的密文，不同的明文摘要成的密文其结果总是不相同，同样的明文其摘要必定一致，并且即使知道了摘要也不能反推出明文。 数字签名技术：数字签名建立在公钥加密体制基础上，是公钥加密技术的另一类应用。它把公钥加密技术和数字摘要结合起来，形成了实用的数字签名技术。 收方能够证实发送方的真实身份； 发送方事后不能否认所发送过的报文； 收方或非法者不能伪造、篡改报文。 非对称加密过程需要用到公钥进行加密，那么公钥从何而来？其实公钥就被包含在数字证书中，数字证书通常来说是由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，证书中包含了一个密钥对（公钥和私钥）和所有者识别信息。数字证书被放到服务端，具有服务器身份验证和数据传输加密功能。 四、HTTP通信传输 客户端输入URL回车，DNS解析域名得到服务器的IP地址，服务器在80端口监听客户端请求，端口通过TCP/IP协议（可以通过Socket实现）建立连接。HTTP属于TCP/IP模型中的运用层协议，所以通信的过程其实是对应数据的入栈和出栈。 报文从运用层传送到运输层，运输层通过TCP三次握手和服务器建立连接，四次挥手释放连接。 为什么需要三次握手呢？为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。 比如：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段，但是server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求，于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了，由于client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据，但server却以为新的运输连接已经建立，并一直等待client发来数据。所以没有采用“三次握手”，这种情况下server的很多资源就白白浪费掉了。 为什么需要四次挥手呢？TCP是全双工模式，当client发出FIN报文段时，只是表示client已经没有数据要发送了，client告诉server，它的数据已经全部发送完毕了；但是，这个时候client还是可以接受来server的数据；当server返回ACK报文段时，表示它已经知道client没有数据发送了，但是server还是可以发送数据到client的；当server也发送了FIN报文段时，这个时候就表示server也没有数据要发送了，就会告诉client，我也没有数据要发送了，如果收到client确认报文段，之后彼此就会愉快的中断这次TCP连接。 五、HTTPS实现原理 client向server发送请求https://baidu.com, 然后连接到server的443端口。 服务端必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥。 传送证书这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间、服务端的公钥，第三方证书认证机构(CA)的签名，服务端的域名信息等内容。 客户端解析证书这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值（秘钥）。然后用证书对该随机值进行加密。 传送加密信息这部分传送的是用证书加密后的秘钥，目的就是让服务端得到这个秘钥，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。 服务段加密信息服务端用私钥解密秘密秘钥，得到了客户端传过来的私钥，然后把内容通过该值进行对称加密。 传输加密后的信息这部分信息是服务端用私钥加密后的信息，可以在客户端被还原。 客户端解密信息客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。 问题：1.怎么保证保证服务器给客户端下发的公钥是真正的公钥，而不是中间人伪造的公钥呢？ 2.证书如何安全传输，被掉包了怎么办？ 数字证书包括了加密后服务器的公钥、权威机构的信息、服务器域名，还有经过CA私钥签名之后的证书内容（经过先通过Hash函数计算得到证书数字摘要，然后用权威机构私钥加密数字摘要得到数字签名)，签名计算方法以及证书对应的域名。当客户端收到这个证书之后，使用本地配置的权威机构的公钥对证书进行解密得到服务端的公钥和证书的数字签名，数字签名经过CA公钥解密得到证书信息摘要，然后根据证书上描述的计算证书的方法计算一下当前证书的信息摘要，与收到的信息摘要作对比，如果一样，表示证书一定是服务器下发的，没有被中间人篡改过。因为中间人虽然有权威机构的公钥，能够解析证书内容并篡改，但是篡改完成之后中间人需要将证书重新加密，但是中间人没有权威机构的私钥，无法加密，强行加密只会导致客户端无法解密，如果中间人强行乱修改证书，就会导致证书内容和证书签名不匹配。 那第三方攻击者能否让自己的证书显示出来的信息也是服务端呢？（伪装服务端一样的配置）显然这个是不行的，因为当第三方攻击者去CA那边寻求认证的时候CA会要求其提供例如域名的whois信息、域名管理邮箱等证明你是服务端域名的拥有者，而第三方攻击者是无法提供这些信息所以他就是无法骗CA他拥有属于服务端的域名 六、运用与总结安全性考虑： HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用 SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行 中间人攻击（MITM攻击）是指，黑客拦截并篡改网络中的通信数据。又分为被动MITM和主动MITM，被动MITM只窃取通信数据而不修改，而主动MITM不但能窃取数据，还会篡改通信数据。最常见的中间人攻击常常发生在公共wifi或者公共路由上。 成本考虑： SSL证书需要购买申请，功能越强大的证书费用越高 SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗（SSL有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP就不支持这个扩展，考虑到XP的装机量，这个特性几乎没用）。 根据ACM CoNEXT数据显示，使用HTTPS协议会使页面的加载时间延长近50%，增加10%到20%的耗电。 HTTPS连接缓存不如HTTP高效，流量成本高。 HTTPS连接服务器端资源占用高很多，支持访客多的网站需要投入更大的成本。HTTPS协议握手阶段比较费时，对网站的响应速度有影响，影响用户体验。比较好的方式是采用分而治之，类似12306网站的主页使用HTTP协议，有关于用户信息等方面使用HTTPS。 HTTPS协议握手阶段比较费时，对网站的响应速度有影响，影响用户体验。比较好的方式是采用分而治之，类似12306网站的主页使用HTTP协议，有关于用户信息等方面使用HTTPS。 原文：https://blog.csdn.net/xiaoming100001/article/details/81109617","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"tcp/ip协议","slug":"tcp-ip协议","permalink":"https://Screw1024.github.io/tags/tcp-ip协议/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"那么微弱的“白日焰火”","slug":"白日焰火","date":"2019-03-16T06:25:23.000Z","updated":"2019-04-02T11:01:57.420Z","comments":true,"path":"reading/Black Coal,Thin Ice-1552717523.html","link":"","permalink":"https://Screw1024.github.io/reading/Black Coal,Thin Ice-1552717523.html","excerpt":"","text":"昨晚动用了一个月一次熬夜看电影的机会，还好《白日焰火》没让我失望😁，好电影而不出名可惜了。 一部优秀的电影，总是能引人深思，给不同的人能够有不同的理解。同时，优秀的电影，镜头语言会让人回味无穷，如张自力踢的那个空啤酒瓶，顺坡一直向下滑动，一是能表明工厂的管理不严，才能为梁志军抛尸提供条件，二是暗示张自立的命运走向下坡，因为后来成了保安。 镜头语言很多，留着以后慢慢品味，而整个剧情的理解亦有很多，而更考研逻辑和人情我的推测大致如下🙃： 1、居委会的第一段戏，大妈一上来就说最近来了几个南方人，不像干传销的，说明当时的环境对待南方人是有地域歧视的，第二段戏中有一匹马没有地方去，被接到居委会，而大妈在此景下跟王队长说洗衣店老板跟女主的关系，暗指是干洗店老板收留了来自南方的女主，同时也符合更加女主的形象气质（不像黑龙江人）。 2、妓女每次在车上换衣服，而没发生关系，揭示了老板的性无能，女主在其店里被猥亵，梁志军可能知道，但是念及收留女主之恩，并且没有触及梁志军底线，而放了他。 3、在宾馆的戏中，梁志军几次想搂着女主而又放下，并对女主说“我被发现了”，女主此时的表情是冷漠的。由此，我推测，梁一开始就是单方面“喜欢”女主，并一直在监视女主的活动，时不时联系，不让女主跟别的男人有接触，并且程度是逐步加深的，第一个开始是快要结婚时候，将其杀害，第二个就是刚恋爱。可能，男主自认为爱着女主吧，这也是他被出卖时，路过女主旁边而没用采取复仇行为的原因。 4、洗衣店老板，在最后的镜头中，给女主送围巾，我猜他是真不知道女主的杀人案，想要猥亵女主是一方面，另一方面也是真正的觉得女主可怜，否则不会留其继续上班，没有因为女主跟三桩命案有关，而赶她走。同时也回应张力军打趣说开夫妻店，他说的“我看得上人家，人家看不上我”，暗指自己没用性能力。 5、剧情的起点来了，随着找到白日焰火的老板娘推测到，当初迷惑警察的尸体就是那个皮氅的主人。时间来到1999年，女主孤生一人来到黑龙江，被洗衣店老板收留，在此时认识了梁，而梁沉默寡言，两人也算同病相怜，梁喜欢吴，而吴只是将其当作朋友（备胎）。再其后，女主因为刚来洗衣店，不熟练，洗坏了一件皮氅。她无力偿还，而对方又刚好是男人，只能把自己给对方来换回平静生活，将其带到某处地方发生关系后，皮氅的主人想要再来一次，而此时的女主不愿意，并做出了强烈反抗，一直“担心”而监视她的梁实在忍受不了，将其杀害。女主配合梁完成了分尸谎言，从而成为了“杀人犯”，并一直活在梁的阴影中。 6、张自力到来给已经麻木的女主身边，给她带来了一丝希望。在经历警告过张自力，不要跟着她之后，张说出滑冰鞋，这一重要信息，女主推测出张自力便衣“警察”的身份，她想利用这个警察能够抓住梁，从而获得解放，她知道梁因为喜欢女主，而不会将其供出。在梁被击毙之后，女主第二天进店时就涂了口红，她觉得她可以过有色彩的生活了。而后来，洗衣店老板有意还是无意的提醒下，张找到了白日焰火的老板娘，他知道女主肯定也参与了犯罪，张自力想要女主说出当年的实情，他就可以凭借又一新功恢复警察并可能晋升。这时的女主，原本想要跟着张自力过平凡的生活，在张自力叫其自首时，顿时绝望，索性成全了张自力的野心，这可以在最后女主指认现场时对环境的生疏以及在警车上那两行死寂的泪水可以看出。 总结：之所以叫《白日焰火》，我想第一层原因是显而易见的，白日焰火夜总会的老板的皮氅被女主洗坏了，是整个电影剧情发展的起点，这是显而易见的。第二层原因是，张自力为了功劳让女主自首，而女主成全他的野心，他内心极度扭曲，在白天给女主放烟花，一来表示谢意，二来庆祝自己，最后到舞厅，陷入了癫狂。 以上是我基础国内版（看完才知道，还有国内删除不少镜头😭），得出的我能理解的合理的解释，但是感觉洗衣店老板的角色没有这么简单，因为给张自力皮氅的时候，就直接从台下拿出来，并且里面已经准备好了线索，看着像是有意给张自力提供的，但是我却无法将这个举动拿到整个剧情中，对我来说好难过，也希望以后随着阅历的增长，以及看看未删减的剧情，我能给出跟好的解释😀，电影的乐趣，也莫过于此。 最近，韩国的李胜利事件这两天扯出一系列腐败，我国舆论普遍对韩国记者的职业操守表示钦佩，政权干预媒体，让有职业操守的媒体人都下岗了，直到朴槿惠快要下台时才有转机。 真相是什么？真相一定要符合大部分人的利益，或者说是符合有绝对权力人的利益。就像白日焰火里1999年死的夜总店老板被梁志军分尸后，仅凭当时的小王看到了身份证就证明死者是梁志军，这不是很草率嘛。当时的碎尸案弄的整个黑龙江人心惶惶，急需快速解决，维护社会安定，这符合当时当局者的利益，所以就认定尸体是梁志军的。 老板娘后来说，第二年去报警说丈夫不见了，如果碎尸案没有定案，是否会被某一角落里的刑警联系起来呢，从而抓住梁志军，也不会发生后面两起分尸案了。 说回韩国，不正是后面的总统想要上台，才会允许韩国媒体报道朴槿惠的闺蜜们事件，世越号事件嘛，当时的政治力量，可能已经是朴槿惠方处在下风吧，报道朴槿惠和其前任的丑闻，符合现任总统的利益。（我平时不说这些哒，感觉像中年油腻男😂）","categories":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}],"tags":[{"name":"-movie","slug":"movie","permalink":"https://Screw1024.github.io/tags/movie/"}],"keywords":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}]},{"title":"python多线程拷贝文件夹","slug":"python多进程拷贝文件夹","date":"2019-03-13T02:42:40.171Z","updated":"2019-03-16T12:59:02.463Z","comments":true,"path":"backend/copy dir by Multiple processes-1552445582.html","link":"","permalink":"https://Screw1024.github.io/backend/copy dir by Multiple processes-1552445582.html","excerpt":"","text":"进程vs程序程序：编写的具有一定功能的代码 进程：运行的代码（区别是环境+是否正在运行） python中进程的三个知识1.os模块的fork()方法 2.multiprocessing模块 3.数据共享multiprocessing模块的Manager 进度显示1234567891011#执行时判断进程，%在输出需要用两个，因为转义字符 num = 0 allFilenum = len(fileNames) while num&lt;allFilenum: queue.get() num += 1 copyRate = num/allFilenum print(\"\\r进度:%.2f%%\"%(copyRate*100),end=\"\") # end=\"表示不换行\" print(\"已完成\") 核心就是先获取总任务的文件数，再用完成的文件/总任务 特别注意的是，他是一直在打印进度，不过不换行，另再输出“%”时，需要注意转义字符。 核心代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354from multiprocessing import Pool,Managerimport osdef copyFile(name,oldFolderName,newFolderName,queue): fr = open(oldFolderName+\"/\"+name) fw = open(newFolderName+\"/\"+name,\"w\") content = fr.read() fw.write(content) fr.close() fw.close() queue.put(name)# 类似其他语言的入口函数，增强可读性 def main(): #用户输入当前目录下需要拷贝的文件夹名 oldFolderName = input(\"请输入需要拷贝的文件夹的名字：\") #创建新文件夹 newFolderName = oldFolderName + \"副本\" os.mkdir(newFolderName) #获取old文件夹中所有的文件名字 fileNames = os.listdir(oldFolderName) #多线程拷贝文件 pool = Pool(5) queue = Manager().Queue() for name in fileNames: pool.apply_async(copyFile,args=(name,oldFolderName,newFolderName,queue)) #执行时判断进程，%在输出需要用两个，因为转义字符 num = 0 allFilenum = len(fileNames) while num&lt;allFilenum: queue.get() num += 1 copyRate = num/allFilenum print(\"\\r进度:%.2f%%\"%(copyRate*100),end=\"\") # end=\"表示不换行\" print(\"已完成\") # pool.close() # pool.join()#通过__name__这个内置变量，在程序运行是他的值是__main__#这样就只能在调用时执行其中代码，代替其他语言的入口函数#同时__name__在被其他模块引入时，值为当前的包的结构if __name__ == \"__main__\": main()","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"-Python","slug":"Python","permalink":"https://Screw1024.github.io/tags/Python/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"如何理解Python中的\"入口函数\"","slug":"Python中的入口函数","date":"2019-03-13T00:58:22.000Z","updated":"2019-03-16T13:14:28.587Z","comments":true,"path":"backend/understand main()  in Python-1552438702.html","link":"","permalink":"https://Screw1024.github.io/backend/understand main()  in Python-1552438702.html","excerpt":"","text":"1. 摘要通俗的理解__name__ == &#39;__main__&#39;：假如你叫小明.py，在朋友眼中，你是小明(__name__ == &#39;小明&#39;)；在你自己眼中，你是你自己(__name__ == &#39;__main__&#39;)。 if __name__ == &#39;__main__&#39;的意思是：当.py文件被直接运行时，if __name__ == &#39;__main__&#39;之下的代码块将被运行；当.py文件以模块形式被导入时，if __name__ == &#39;__main__&#39;之下的代码块不被运行。 2. 程序入口对于很多编程语言来说，程序都必须要有一个入口，比如C，C++，以及完全面向对象的编程语言Java，C#等。如果你接触过这些语言，对于程序入口这个概念应该很好理解，C，C++都需要有一个main函数作为程序的入口，也就是程序的运行会从main函数开始。同样，Java，C#必须要有一个包含Main方法的主类，作为程序入口。 而Python则不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。 一个Python源码文件（.py）除了可以被直接运行外，还可以作为模块（也就是库），被其他.py文件导入。不管是直接运行还是被导入，.py文件的最顶层代码都会被运行（Python用缩进来区分代码层次），而当一个.py文件作为模块被导入时，我们可能不希望一部分代码被运行。 2.1 一个.py文件被其他.py文件引用假设我们有一个const.py文件，内容如下： 12345678PI = 3.14def main(): print(\"PI:\", PI)main()# 运行结果：PI: 3.1412345678 现在，我们写一个用于计算圆面积的area.py文件，area.py文件需要用到const.py文件中的PI变量。从const.py中，我们把PI变量导入area.py： 123456789101112131415from const import PIdef calc_round_area(radius): return PI * (radius ** 2)def main(): print(\"round area: \", calc_round_area(2))main()'''运行结果：PI: 3.14round area: 12.56'''123456789101112131415 2.2 修改const.py，添加if __name__ == &quot;__main__&quot;我们看到const.py中的main函数也被运行了，实际上我们不希望它被运行，因为const.py提供的main函数只是为了测试常量定义。这时if __name__ == &#39;__main__&#39;派上了用场，我们把const.py改一下，添加if __name__ == &quot;__main__&quot;： 1234567PI = 3.14def main(): print(\"PI:\", PI)if __name__ == \"__main__\": main()1234567 运行const.py，输出如下： 1PI: 3.141 运行area.py，输出如下： 1round area: 12.561 如上，我们可以看到if __name__ == &#39;__main__&#39;相当于Python模拟的程序入口，Python本身并没有这么规定，这只是一种编码习惯。由于模块之间相互引用，不同模块可能有这样的定义，而程序入口只有一个。到底哪个程序入口被选中，这取决于__name__的值。 3. __name__3.1 __name__反映一个包的结构__name__是内置变量，可用于反映一个包的结构。假设我们有一个包a，包的结构如下： 12345a├── b│ ├── c.py│ └── __init__.py└── __init__.py12345 在包a中，文件c.py，__init__.py，__init__.py的内容都为： 1print(__name__)1 当一个.py文件（模块）被其他.py文件（模块）导入时，我们在命令行执行 1python -c \"import a.b.c\"1 输出结果： 123aa.ba.b.c123 由此可见，__name__可以清晰地反映一个模块在包中的层次。 3.2 __name__表示当前模块的名字__name__是内置变量，可用于表示当前模块的名字。我们直接运行一个.py文件（模块） 1python a/b/c.py1 输出结果： 1__main__1 由此我们可知：如果一个.py文件（模块）被直接运行时，则其没有包结构，其__name__值为__main__，即模块名为__main__。 所以，if __name__ == &#39;__main__&#39;的意思是：当.py文件被直接运行时，if __name__ == &#39;__main__&#39;之下的代码块将被运行；当.py文件以模块形式被导入时，if __name__ == &#39;__main__&#39;之下的代码块不被运行。 4. __main__.py文件与python -mPython的-m参数用于将一个模块或者包作为一个脚本运行，而__main__.py文件相当于是一个包的“入口程序“。 4.1 运行Python程序的两种方式 python xxx.py，直接运行xxx.py文件 python -m xxx.py，把xxx.py当做模块运行 假设我们有一个文件run.py，内容如下： 123import sysprint(sys.path)123 我们用直接运行的方式启动 1python run.py1 输出结果(为了说明问题，输出结果只截取了重要部分，下同)： 1['/home/huoty/aboutme/pythonstudy/main', ...]1 然后以模块的方式运行: 1python -m run.py1 输出内容 12['', ...]/usr/bin/python: No module named run.py12 由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异： 直接运行方式是把run.py文件所在的目录放到了sys.path属性中 以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了 sys.path 属性中。 以模块方式运行还有一个不同的地方：多出了一行No module named run.py的错误。实际上以模块方式运行时，Python先对run.py执行一遍 import，所以print(sys.path)被成功执行，然后Python才尝试运行run.py模块，但是在path变量中并没有run.py这个模块，所以报错。正确的运行方式，应该是python -m run。 4.2 __main__.py的作用仍然先看例子，假设我们有如下一个包package： 123package├── __init__.py└── __main__.py123 其中，文件__init__.py的内容 1234import sysprint(\"__init__\")print(sys.path)1234 其中，文件__main__.py的内容 1234import sysprint(\"__main__\")print(sys.path)1234 接下来，我们运行这个package，使用python -m package运行，输出结果： 12345__init__['', ...]__main__['', ...]12345 使用python package运行，输出结果： 12__main__['package', ...]12 总结一下 当加上-m参数时，Python会把当前工作目录添加到sys.path中；而不加-m时，Python则会把脚本所在目录添加到sys.path中。 当加上-m参数时，Python会先将模块或者包导入，然后再执行。 __main__.py文件是一个包或者目录的入口程序。不管是用python package还是用python -m package运行，__main__.py文件总是被执行。 5. 原文链接如何简单地理解Python中的if name == ‘main‘","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"-Python","slug":"Python","permalink":"https://Screw1024.github.io/tags/Python/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]},{"title":"GIS大牛开发个人博客归纳","slug":"GIS大牛开发博客归纳","date":"2019-03-08T02:28:09.000Z","updated":"2019-05-16T03:45:45.597Z","comments":true,"path":"GIS/GIS development blog-1552012144.html","link":"","permalink":"https://Screw1024.github.io/GIS/GIS development blog-1552012144.html","excerpt":"","text":"​ Esri中国信息技术有限公司是Esri公司在中国大陆的唯一分支机构，为客户提供基于地理信息技术的系统设计咨询、技术支持、教育培训等服务，还与“中国科学院国家资源与环境信息重点试验室”联合建立了“ArcGIS中国培训中心”，并与国内200多家单位和专业机构建立了合作伙伴业务关系，为用户提供全方位的解决方案。 ​ 总是通过Google找各种GIS相关的blog，这次，把国内外所有的GIS相关的高价值的blog全部打包，一个不剩，统统贡献出来。 ​ 注意：国外的博客需要科学上网才能打开😜。 Blog 描述 1 Esri Blog Esri官方博客，最权威的ArcGIS信息来源。 2 Baocai Zhang Esri北京研发中心大牛的博客。 3 Zhifang Wang Esri北京研发中心大牛的博客。 4 Qun Sun Esri北京研发中心大牛的博客。 5 Guodong Song Esri北京研发中心大牛的博客。 6 Very Spatial WVU毕业的学生创建，GIS信息园地。 7 All Points Blog 超好的GIS博客，内容全面，从理论到实践，紧跟GIS技术前沿。 8 James Fee GIS Blog James Fee的个人博客，超丰富的内容。 9 Po Ve Sham 非常实用的有关地理空间技术和环境学的博客，还有大量关于Open Street Map的文章。 10 Bostonography 专注于美国波士顿地理信息的博客，N多数据分析文章和漂亮的可视化特效。 11 The Offical Blog of Fortius One – Now GeoIQ Blog FortiusOne是一家地理信息技术公司（现已被Esri收购），有很多可视化特效和在线数据分析，以及数据共享方面的产品，不过他们的很多博客都是在讲他们的产品。 12 Mapperz, The Mapping News Blog N多关于Google Maps和Mash-ups的文章。 13 SlashGeo 超多关于GIS行业的新闻文章。 14 Stamen Design 基本都是数据可视化方面的文章。 15 FloatingSheep FloatingSheep是一个合作性质的研究组织，研究员来自于Kentucky大学和牛津大学，工作主要是Google Maps的数据挖掘方面。 16 Outside the Neatline 内容主要是关于地理信息系统的理论和实践。 17 Google Lat Long Blog 这个主要是由Google Maps的开发人员写的文章。 18 Geographika 关于GIS的纯技术文章，内容涉及OpenLayers、Spatial SQL和计算机硬件等。 19 Geospatial Analysts 如果你有GIS tools的问题，或你正在寻找解决GIS task的脚本，请到这里来。 20 GIS and Science Esri员工Matt Artz的博客，有大量曾发表在学术杂志上的文章。 21 EdParsons.com Google的地理空间技术大牛Ed Parsons的博客，内容非常广泛。 22 Odoe.net 大量GIS编程技术，含JavaScript、C#和Python。 23 Spatial Law and Policy 不是那种常规性科普博客，内容都是关于常见的GIS极专业的问题。 24 MapButcher 这个博客好久没更新了，但MapButcher这名字起的倒是很大气，地图屠夫。 25 Borderlines 都是发布在纽约时报上的文章，作者Frank Jacobs，都是有关地理学方面的。 26 Node Dangles 超好的GIS技术文章，内含大量示例代码。 27 MapBrief 地理空间分析文章。 28 GIS Studio 又一个带有示例代码的GIS博客。 29 GeoMusings 内容涉及开源技术、应用评论和GIS常见问题。 30 Volunteered Geographic Information 内容都是关于GIS的技术研究文章和空间分析讨论。 31 The Pragmatic Geographer 有关GIS 的应用评论和技术文摘。 32 A Cartographer’s Toolkit Gretchen Peterson的个人博客，主要是制图学方面。 33 Perrygeo 超好的地理空间方面的博客，内容涉及程序开发和开源软件。 34 Another GIS Blog 关于GIS方面的技术博客，涉及Python语言、ArcGIS和各种编程技巧。 35 Cafe Python N多代码示例，如果你是一个Esri用户并且擅长Python，那这里是天堂。 36 Fuzzy Tolerance 这个GIS博客不光名字好听，内容也不错哦。 37 Planet PostGIS 如果你正在寻找有关PostGIS的故事，到这里吧。 38 Gary’s Bloggage 各种地理相关性文章，包括Mapping和Web GIS。 39 Free and Open Source GIS Ramblings 作者Anita Graser，来自QGIS团队，同时也是OSGeo成员。 40 GIS Dude’s Weblog gisdude的博客，全都是地理相关文章。 41 Mappatondo 包含丰富的GIS相关代码示例（空间分析和mash-ups） 42 Spatial DBA Advisor 主要是空间数据库方面的文章，涉及Oracle和PostGIS。 43 Kelso’s Corner Nathaniel Vaughn Kelso的博客，GIS大牛。 44 Digitial Geography 在这里你会找到很多教程性的文章，内容包括GIS和统计学等，大部分都是由欧洲各院校的地理专业学生发布的。 45 AnyGeo Blog Glenn Letham的博客，这位大牛熟悉GIS领域各种应用，他的twitter是https://twitter.com/gletham。 46 blog.allanglen.com 内容包括地理空间信息技术和软件开发。 47 GIS Thought 既是博客又是论坛。 48 blog.davebouwman.com 作者Dave Bouwman，JavaScript开发人员，来自Esri DC团队，博客含大量代码示例和超有深度的技术文章。 49 Thunderhead Explorer 如果你从来没听过Mansour Raad的讲演，那就来这吧。好文超多，内部覆盖大数据和软件开发。 50 Smathermather’s Weblog 遥感、GIS、生态学和时髦技术。 51 Wherewithal 这个作者说，他每天脑袋里想的，不是地图就是啤酒。 52 BostonGIS Blog 基本都是PostGIS的新闻，也包括一些其他开源技术和geo-meetups。 53 Constant Geography Michael Busby，GIS领域的专家。 54 SDE Intercept 关于SDE的博客，想了解这方面的知识就来这吧。 55 GeoSprocket 作者Bill Morris，如果你想知道这个世界上发生了什么有关GIS的事，来这吧，要啥有啥。 56 Into the Pudding 关于地理空间技术的博客。","categories":[{"name":"GIS","slug":"GIS","permalink":"https://Screw1024.github.io/categories/GIS/"}],"tags":[{"name":"GIS","slug":"GIS","permalink":"https://Screw1024.github.io/tags/GIS/"},{"name":"blog","slug":"blog","permalink":"https://Screw1024.github.io/tags/blog/"}],"keywords":[{"name":"GIS","slug":"GIS","permalink":"https://Screw1024.github.io/categories/GIS/"}]},{"title":"为何建站","slug":"为何建站","date":"2019-03-05T03:23:07.000Z","updated":"2019-03-08T01:52:08.196Z","comments":true,"path":"thought/why this blog site-1551756187.html","link":"","permalink":"https://Screw1024.github.io/thought/why this blog site-1551756187.html","excerpt":"","text":"为何建站因为本人是地理信息科学专业的大三学生（2019年），作为交叉学科，我们在本科阶段要学的主要分为计算机编程知识、测绘遥感方面的专业知识、考研统考学科 基础学科知识。 搭建这个网站现阶段主要是为了记录在学习的过程中的技术收获，养成知识的归纳的习惯，另外就是写一些时事的看法 吐槽。😂 而最主要的目的，就是能够通过本站展示自己，如果能以此能找到三俩好友，幸甚至哉。😀 为何记录 人类区别于其他物种最重要的原因是，人类懂得记录，记录会推动人类反思，反思进而推动人类进步，而其他物种的生生不息大多只体现在繁衍上。 带着自己的思考记录，在自己回首再读的时候，或许能够发现当时的思维的局限，能够明白自己是否在进步。过年期间没事时，又看了一遍黎明之前跟大秦帝国，觉得自己能够对人物之间的解读突然上了一个层次，而这是突然发现的，所以想通过平时记录一些时事，一做学习之余的消遣，二为以后反思提供资料。 补充简言之，本站是一个记录技术和思考的原创个人博客。 现阶段主要是计算机方面的一些总结，可以获得成就奖嘛😜。以后打算走GIS开发路线，如果能够顺利，希望以后能够有机会写一些GIS方面的总结，因为本人能力有限，在学校阶段主要精力放在了计算机上了。 文章中如若发现错误或不当言论，还望您不吝赐教。 关于作者在校生，刚把前端基础学的差不多（顺带说下，通过搭建本站终于懂了node的模块化的好处了）。目前正在学Python，想学习一下Django以及爬虫，这些都是以后web gis的技术要求。 技术交流、开车交友请右转找微信小图标🙃","categories":[{"name":"思考","slug":"thought","permalink":"https://Screw1024.github.io/categories/thought/"}],"tags":[{"name":"thought","slug":"thought","permalink":"https://Screw1024.github.io/tags/thought/"},{"name":"hexo","slug":"hexo","permalink":"https://Screw1024.github.io/tags/hexo/"}],"keywords":[{"name":"思考","slug":"thought","permalink":"https://Screw1024.github.io/categories/thought/"}]},{"title":"喜欢听歌的人，内心戏可能比较多吧","slug":"我的爱好","date":"2019-03-05T03:23:07.000Z","updated":"2019-04-24T02:03:21.029Z","comments":true,"path":"thought/about my hobby-1551756187.html","link":"","permalink":"https://Screw1024.github.io/thought/about my hobby-1551756187.html","excerpt":"","text":"我的爱好作为一名音痴，不知为何对听音乐情有独钟。 哈哈，骗你的😜，我的想法是： 大概是歌曲里面的某句话突然叩击到我们内心的柔软，让我们在那一瞬间找到了共鸣，找到了一个倾诉的出口，很多时候我们会发现，把那些事情说出来以后，反倒释怀了，很多压在心里一直过不去的坎，在倾诉的那一刻，也得到了真正的释放和解脱。 如果你也喜欢听音乐，那太好了🙃。 喜欢的类型 民谣的调调很勾人，民谣的技巧是讲故事和打动听故事的人，民谣不普通，因为我们的生活可以很撩人。 Summer_夏叶子 最开始喜欢听的歌，现在想想有点吵吵😂，尤其喜欢bigbang，汪峰，当时觉得能给我带来的是力量吧，只要嗓门大，节奏强就是好歌，而现在喜欢的民谣宋东野的==安和桥==，这是心目中唯一一首TOP0级别的歌曲。 对把自己的经历写进歌的曲子，我都毫无抵抗力，而民谣是最佳媒介，个人觉得。 下面几首TOP1级别的： 朴树 的 那些花儿，平凡之路 Ed Sheeran 的 Photograph John Legend 的 All of Me 喜爱的歌手目前为止，只对两人佩服至极，其中一位便是歌手 朴树。 歌词特别诗化，嗓音又特别脆弱。他的歌“就像朗诵诗一样，脆弱就会特别打动人” 高晓松 《生如夏花》名字出自于泰戈尔的《飞鸟集》：“生如夏花之绚烂，死如秋叶之静美”。在绚烂至极之时，他选择了逃离，一夜之间，他消失了 原来以为他只是短暂的逃离，不曾想一走就是十年。 2014年朴树回来了，十年，多少风云变幻，多少沧海桑田，但他回来之时，还是有那么多人从拥挤的人潮中抽离出来，躲在某个角落里，眼角含着泪跟着朴树一起朗诵： 我曾经跨过山和大海，也穿过人山人海 我曾经拥有这一切，转眼都飘散如烟 我曾经失落失望失掉所有的方向 直到看见平凡 才是唯一的答案 《平凡之路》 任何情况下，朴树永远跟他的乐队同台演出，有电视台的跨年演唱会提出重金只请朴树一人（少出乐队费用），被他拒绝了，他答应过乐队“不会瞒着大家去接商演”。 他们跑去北京什刹海公园，在零下七八度的天气下唱着： 你是否得到了，期待的人生 梦里的海潮声，他们又如何 从指缝中划过，像在狂野里的风 《猎户星座》","categories":[{"name":"思考","slug":"thought","permalink":"https://Screw1024.github.io/categories/thought/"}],"tags":[{"name":"thought","slug":"thought","permalink":"https://Screw1024.github.io/tags/thought/"},{"name":"hobby","slug":"hobby","permalink":"https://Screw1024.github.io/tags/hobby/"}],"keywords":[{"name":"思考","slug":"thought","permalink":"https://Screw1024.github.io/categories/thought/"}]},{"title":"曾国藩家书","slug":"曾国藩家书","date":"2019-02-05T03:33:02.000Z","updated":"2019-04-24T01:25:27.431Z","comments":true,"path":"reading/《Zeng Guofan's Family Book》-1549337582.html","link":"","permalink":"https://Screw1024.github.io/reading/《Zeng Guofan's Family Book》-1549337582.html","excerpt":"","text":"曾文正公 谋国之忠，知人之明，自愧不如元辅；同心若金，攻错若石，相期无负平生。 [左宗棠] 师事近三十年，薪尽火传，筑室忝为门生长；威名震九万里，内安外攘，旷世难逢天下才。 [李鸿章] ​ 李鸿章对曾文正公的评价勉强算得上是彩虹屁了，毕竟给他打过工嘛😜。但是，何兆武教授的《上学记》里曾写过“中国历史上真正能够做到立德，立功，立言的只有二人：王阳明，曾国藩”，我想是比较公正的吧。 ​ 王阳明作为大哲学家，提出的“格物致知”，在中学语文中为难我半天，现在还有阴影😂，只能勉强从《曾国藩家书》入手啦。 拉家常​ 一封封看似聊着居家艰难的家书，字里行间蕴含的是对祖父母、父母、兄弟、妻儿、亲朋好友的浓浓的挂念、敬重、关怀、关心之情，每一封家书都洋溢着浓郁亲情。每次读到此书的写给父母的部分，羞愧之至，想到上了大一之后，解放了天性🙃，觉得父母的叮嘱就是唠叨，是一种约束，每个月打一次电话，到了大二才意识到不对，而且每次打电话更像是一种义务，只要完成了就好了，不是发自内心的尊重，现在想来，实在不应该。曾文正公即使身居高位，公务繁忙，还能如此，实在汗颜，今后要多跟家里汇报自己的状况。乌鸦的反哺之恩在于物质上，而在现代社会，人更注重的是精神的感受，所以我要做到好好生活，并让父母直到自己的成长，勉强能回馈父母。希望，以此文提醒自己。 ​ 记得有一封家书，写给亲戚资助，不要因为关系好而多给，关系不好而少给。一两句家长里短，道出“不患寡而患不均”的真谛了，凡此种种，须细细品读。 恒​ 在家书中，曾国藩教育自己的弟弟说：”凡人做一事，便须全副精神往此一事，首尾不懈。不可见异思迁，做这样想那样，坐这山望那山。“ ​ 曾文正公如此令人钦佩，其对于“恒”的执行，旷世独存 。古代儒家学者是何其多，能够写如此多的家书，上下五千年能有几人？读其家书，似乎挨着一个慈眉善目的老先生，捋捋花白的胡须，在你耳边娓娓而谈，那稀稀疏疏的胡须偶尔随风拂过你眼，说来的却是些家长里短，写给弟弟，儿女的都是通过一件件小事，来教其做人，照顾所有人的情绪。即便是对儿子的信中，也会说出自己那些地方做的不对，知道自己恒心不足，就严格控制自己，知道自己文章、诗词不好，就勤加练习。 ​ 坚持写家书只是曾文正公对于“恒”执行的一个方面，我想通过某一件事，基本就能大致知道其价值观，曾文正公的“恒”，是我最有感触的，也是首先要学习的。😁 谦​ 曾文正公给儿子的信中写道“自念贫窭无知，官至一品，寿逾五十，薄有浮名，兼秉兵权，忝窃万分，夫复何憾！”，作为清朝文臣之首，仍有一颗谦虚之心。当代大多数父母，给儿女们的教导都是命令式的，恰逢青春期孩子逆反心理，肯定容易发生矛盾，同时给孩子的命令，自己又不能做到，实在不能令孩子信服。我觉得，当父母要是能如曾文正公，谦虚，能承认自己的不足，对孩子的“期待”，自己能以身作则，方是良策。 ​ 不知道在哪看到的一句话“我们最大的错误， 是把最差的脾气和最糟糕的一面留给了最亲的人。 却把耐心和宽容给了陌生人。”，我觉得很有道理。对待孩子尚谦逊有礼，曾文正公对待别人也就不言而明了。 国藩素拘谨，其才不如胡左，而功倍之，独知人善用，是其特长 [陈公笃] ​ 谦虚，是知人善任的前提，如何能够发现别人的才能，承认别人的才能，在自己有能力是而任用之，谦虚是其第一步。😄","categories":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}],"tags":[{"name":"book","slug":"book","permalink":"https://Screw1024.github.io/tags/book/"}],"keywords":[{"name":"读书","slug":"reading","permalink":"https://Screw1024.github.io/categories/reading/"}]},{"title":"Node创建服务器","slug":"Node创建服务器","date":"2018-11-08T14:18:56.000Z","updated":"2019-03-08T02:48:32.389Z","comments":true,"path":"frontend/Create server with Node-1541686736.html","link":"","permalink":"https://Screw1024.github.io/frontend/Create server with Node-1541686736.html","excerpt":"","text":"要点:​ 1.通过引入核心模块，来进行文件的读取和服务器的创建，并调用相应模块的API，进行想要的操作。 ​ 2.不同的文件类型进行不同的解析，主要通过Content-Type（多用途互联网邮件拓展）进行不同的定义，如html对应text/html，注意编码方式的声明，服务器默认是utf-8，但是浏览器编码方式是跟当前操作系统是一致的，win10中文操作系统是gbk编码方式，所以会造成乱码。 ​ 3.通过node启动服务器后，修改了被读取的文件，不需要重启服务器，因为他是动态读取文件的，通过之前建立的联系。 相关代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647var http = require('http');var fs = require('fs');// 引入两个核心库var server = http.createServer();server.on('request',function(req,res)&#123; var url = req.url; // 获取输入的请求字符串url if(url === '/')&#123; //‘/’后是请求的路径 fs.readFile('./reource/halloword.html',function(err,data)&#123; if(err)&#123; res.setHeader('Content-Type','text/plain; charset=utf-8'); res.end('老哥，没读出来，是不是路径或者文件名写错了啊'); &#125;else&#123; //data存取的是读取到的内容，是二进制的数据，通过toString转为字符串 //res.end()支持两种格式，二进制格式和字符串类型 res.setHeader('Content-Type','text/html; charset=utf-8'); // 注意和上面个text/plain的区别，通过text/html声明html类型文件 res.end(data); &#125; &#125;); &#125;else if(url === '/pushu')&#123; fs.readFile('./reource/pushu.jpeg',function(err,data)&#123; if(err)&#123; res.setHeader('Content-Type','text/plain; charset=utf-8'); res.end('老哥，没读出来，是不是路径或者文件名写错了啊'); &#125;else&#123; //data存取的是读取到的内容，是二进制的数据，通过toString转为字符串 //res.end()支持两种格式，二进制格式和字符串类型 res.setHeader('Content-Type','image/jpeg'); // 图片反而不能声明utf-8编码格式他有特定的编码格式 res.end(data); &#125; &#125;); &#125;&#125;);server.listen(3000,function()&#123; console.log('老哥，安排好了');&#125;);​ 启动服务器： 效果：","categories":[{"name":"前端","slug":"frontend","permalink":"https://Screw1024.github.io/categories/frontend/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://Screw1024.github.io/tags/Node/"}],"keywords":[{"name":"前端","slug":"frontend","permalink":"https://Screw1024.github.io/categories/frontend/"}]},{"title":"大二完成的学生管理系统","slug":"大二写的学生管理系统","date":"2018-05-04T14:01:10.000Z","updated":"2019-03-08T02:02:11.262Z","comments":true,"path":"backend/Student management system-1525442470.html","link":"","permalink":"https://Screw1024.github.io/backend/Student management system-1525442470.html","excerpt":"","text":"一、创建关系 ​ 首先创建三个表student、teacherInfo、stndentInfo 分别用于存放学生基本信息、老师账户和密码、学生的学号和密码。 二、权限设置 ​ 分别建立老师和学生的登陆入口，通过入口信息判断后查询不同的表（关系），从而完成不同的操作人员的数据库的权限要求，老师可以看到全部信息，每个学生只能看到自己的信息。 ​ 为了区别不同的登陆人员，先定义两个RadioButton，由于学生人数比老师人数多的多，在学生的RadioButton的控件属性check中，选择为默认。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869private void btnOk_Click(object sender, EventArgs e) &#123; if (rbtnStudent.Checked) &#123; //选择的是学生对象 using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School2;User ID=sa;Password =2323010676;\")) &#123; conn.Open(); //打开数据库的连接 String sql = \"select * from stndentInfo where sno = @sno and spw = @spw\"; //创建数据库的操作字符串 SqlCommand cmd = new SqlCommand(sql, conn); //对指定的对象，操作字符串内容 cmd.Parameters.Add(new SqlParameter(\"@sno\", txtNo.Text)); //用参数代替占位符，线性更安全 cmd.Parameters.Add(new SqlParameter(\"@spw\", txtPw.Text)); SqlDataReader reader = cmd.ExecuteReader();//操作 if (reader.Read()) &#123; //如果查询到内容，跳转到Information界面，同时关闭当前界面 Information info = new Information(); info.Show(); this.Hide(); &#125; else &#123; MessageBox.Show(\"请输入正确信息！\"); &#125; &#125; &#125; else &#123; //这里只有两个选项，就没写条件，其余同上，注意对应的数据关系，表是不同的 using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School2;User ID=sa;Password =2323010676;\")) &#123; conn.Open(); String sql = \"select * from teacherInfo where userT = @userT and pwT = @pwT\"; SqlCommand cmd = new SqlCommand(sql, conn); cmd.Parameters.Add(new SqlParameter(\"@userT\", txtNo.Text)); cmd.Parameters.Add(new SqlParameter(\"@pwT\", txtPw.Text)); SqlDataReader reader = cmd.ExecuteReader(); if (reader.Read()) &#123; teacherUse teac = new teacherUse(); teac.Show(); this.Hide(); &#125; else &#123; MessageBox.Show(\"请输入正确信息！\"); &#125; &#125; &#125; &#125; //如果取消操作，关闭程序 private void btnCancel_Click(object sender, EventArgs e) &#123; this.Close(); &#125; 三、学生功能 ​ 完成修改密码，添加新的学生信息（为了方便），这里需要引起重视的是，这里的date类型需要进行转换，注意和老师界面查询是的date类型做出区分。 查询模块 12345678910111213141516171819202122232425262728293031private void btnOk_Click(object sender, EventArgs e) &#123; using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School2;User ID=sa;Password =2323010676;\")) &#123; conn.Open(); if (txtNewpw.Text == txtCheckpw.Text) &#123; string sql = String.Format(\"update stndentInfo set spw = @spw where sno = @sno\"); SqlCommand cmd = new SqlCommand(sql, conn); cmd.Parameters.Add(new SqlParameter(\"@sno\", txtUser.Text)); //这里注意也要写成txt.User.Text转换的是文本框里面的内容 cmd.Parameters.Add(new SqlParameter(\"@spw\", txtCheckpw.Text)); int rows = cmd.ExecuteNonQuery(); //这句话时执行的语句的必要的控制性的一句话 MessageBox.Show(\"新密码已经修改完成\"); &#125; else &#123; MessageBox.Show(\"请输入两次相同的密码\"); &#125; &#125; &#125; 修改密码模块 12345678910111213141516171819202122232425262728293031private void btnOk_Click(object sender, EventArgs e) &#123; using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School2;User ID=sa;Password =2323010676;\")) &#123; conn.Open(); if (txtNewpw.Text == txtCheckpw.Text) &#123; string sql = String.Format(\"update stndentInfo set spw = @spw where sno = @sno\"); SqlCommand cmd = new SqlCommand(sql, conn); cmd.Parameters.Add(new SqlParameter(\"@sno\", txtUser.Text)); //这里注意也要写成txt.User.Text转换的是文本框里面的内容 cmd.Parameters.Add(new SqlParameter(\"@spw\", txtCheckpw.Text)); int rows = cmd.ExecuteNonQuery(); //这句话时执行的语句的必要的控制性的一句话 MessageBox.Show(\"新密码已经修改完成\"); &#125; else &#123; MessageBox.Show(\"请输入两次相同的密码\"); &#125; &#125; &#125; 四、老师功能 ​ 查询学生的详细信息，注意date格式的转换，以及完成查询后的标签内容的转换。 对学生单个查询 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private void btnOk_Click(object sender, EventArgs e) &#123; if(txtSno.Text == null) &#123; MessageBox.Show(\"请输入学号\"); &#125; else &#123; using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School2;User ID=sa;Password =2323010676;\")) &#123; conn.Open(); String sql = \"select * from student where sno = @sno\"; SqlCommand cmd = new SqlCommand(sql,conn); cmd.Parameters.Add(new SqlParameter(\"@sno\", txtSno.Text)); SqlDataReader reader = cmd.ExecuteReader(); if (reader.Read()) &#123; txtMajor.Text = reader.GetString(reader.GetOrdinal(\"smajor\")); txtSex.Text = reader.GetString(reader.GetOrdinal(\"sSex\")); txtName.Text = reader.GetString(reader.GetOrdinal(\"sname\")); DateTime dt = reader.GetDateTime(reader.GetOrdinal(\"sbirthday\")); //用Datetime格式接收时间对象 txtBirthday.Text = dt.ToShortDateString(); //将需要显示的内容转化成能在lable控件中显示的字符串 &#125; else &#123; //清除上一次查询标签中的内容，不然下次查询不显示查询出来的内容 txtSno.Text = null; txtSex.Text = null; txtName.Text = null; txtMajor.Text = null; txtBirthday.Text = null; MessageBox.Show(\"抱歉，没有查到对应学号的学生信息\"); &#125; &#125; &#125; &#125; 对学生进行分组查询 ​ 分组对学生进行查询，将结果添加进DataGirdView控件中，注意前面也提到了Anchor控制位置。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public partial class 学生信息查询 : Form &#123; public 学生信息查询() &#123; InitializeComponent(); &#125; private void 学生信息查询_Load(object sender, EventArgs e) &#123; //加载界面时，即添加下拉框里面的内容 cbxinfo.Items.Add(\"地信专业\"); cbxinfo.Items.Add(\"测绘专业\"); cbxinfo.Items.Add(\"物理专业\"); cbxinfo.Items.Add(\"外语专业\"); cbxinfo.Items.Add(\"中文专业\"); cbxinfo.Items.Add(\"计算机专业\"); &#125; private void btnOk_Click(object sender, EventArgs e) &#123; using (SqlConnection conn = new SqlConnection(\"Data Source=DESKTOP-BEUJ3C4;Initial Catalog=School;User ID=sa;Password =2323010676;\")) //这里使用的数据库是，前面查询信息作业添加的school数据库，用于存放学生的基本信息，及考试信息 &#123; conn.Open(); //String sql = \"select * from student where 所属专业 =@所属专业\"; String sql = String.Format( \"select * from student where 所属专业 ='&#123;0&#125;'\",cbxinfo.Text); SqlCommand cmd = new SqlCommand(); //创建数据库命令对象 // cmd.Parameters.Add(new SqlParameter(\"@所属专业\",cbxinfo.Text)); //将下拉框里面的文本代替参数信息 用参数不行，不知为什么，改用占位符 SqlDataAdapter sda = new SqlDataAdapter(sql, conn); //逐行查询，区别于SqlDataReader聚合查询 DataSet ds = new DataSet(); //创建容器，存放查询出来的对象 sda.Fill(ds);//将对象填充容器 dgvShow.DataSource = ds.Tables[0]; //绑定数据，将查询出来的第一个表数据显示在dgvShow中 &#125; &#125; &#125; 结果：","categories":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}],"tags":[{"name":"Database","slug":"Database","permalink":"https://Screw1024.github.io/tags/Database/"},{"name":"C#","slug":"C","permalink":"https://Screw1024.github.io/tags/C/"}],"keywords":[{"name":"后端","slug":"backend","permalink":"https://Screw1024.github.io/categories/backend/"}]}]}